# This is an nucleo-h743zi with a single STM32H743ZIT6U chip.
# http://www.st.com/en/evaluation-tools/nucleo-h743zi.html
#
# Two Winbond W25Q256FV attached, dual-1-line or dual-4-line mode
#

# This is for using the onboard STLINK
source [find interface/stlink.cfg]

hla_vid_pid 0x0483 0x374f

transport select hla_swd

set CHIPNAME stm32h743zit6

# enable stmqspi
set QUADSPI 1

source [find target/stm32h7x_dual_bank.cfg]

reset_config none
#reset_config srst_only srst_nogate connect_assert_srst

# QUADSPI initialization
# flash = 1: only flash1, = 2: only flash 2, anything else: both flash1 and flash2
# qpi: 4-line mode
proc qspi_init { flash qpi } {
	mmw 0x580244E0 0x000007FF 0				;# RCC_AHB4ENR |= GPIOAEN-GPIOKEN (enable clocks)
	mmw 0x580244D4 0x00004000 0				;# RCC_AHB3ENR |= QSPIEN (enable clock)
	sleep 1									;# Wait for clock startup

	# PB10: BK1_NCS, PB02: CLK, PD13: BK1_IO3, PE02: BK1_IO2, PD12: BK1_IO1, PD11: BK1_IO0
	# PC11: BK2_NCS, PB02: CLK, PE10: BK2_IO3, PE09: BK2_IO2, PE08: BK2_IO1, PE07: BK2_IO0

	# PB10:AF09:V, PB02:AF09:V, PC11:AF09:V, PD13:AF09:V, PD12:AF09:V, PD11:AF09:V
	# PE10:AF10:V, PE09:AF10:V, PE08:AF10:V, PE07:AF10:V, PE02:AF09:V

	# Port B: PB10:AF09:V, PB02:AF09:V
	mmw 0x58020400 0x00200020 0x00100010	;# MODER
	mmw 0x58020408 0x00300030 0x00000000	;# OSPEEDR
	mmw 0x5802040C 0x00000000 0x00300030	;# PUPDR
	mmw 0x58020420 0x00000900 0x00000600	;# AFRL
	mmw 0x58020424 0x00000900 0x00000600	;# AFRH

	# Port C: PC11:AF09:V
	mmw 0x58020800 0x00800000 0x00400000	;# MODER
	mmw 0x58020808 0x00C00000 0x00000000	;# OSPEEDR
	mmw 0x5802080C 0x00000000 0x00C00000	;# PUPDR
	mmw 0x58020824 0x00009000 0x00006000	;# AFRH

	# Port D: PD13:AF09:V, PD12:AF09:V, PD11:AF09:V
	mmw 0x58020C00 0x0A800000 0x05400000	;# MODER
	mmw 0x58020C08 0x0FC00000 0x00000000	;# OSPEEDR
	mmw 0x58020C0C 0x00000000 0x0FC00000	;# PUPDR
	mmw 0x58020C24 0x00999000 0x00666000	;# AFRH

	# Port E: PE10:AF10:V, PE09:AF10:V, PE08:AF10:V, PE07:AF10:V, PE02:AF09:V
	mmw 0x58021000 0x002A8020 0x00154010	;# MODER
	mmw 0x58021008 0x003FC030 0x00000000	;# OSPEEDR
	mmw 0x5802100C 0x00000000 0x003FC030	;# PUPDR
	mmw 0x58021020 0xA0000900 0x50000600	;# AFRL
	mmw 0x58021024 0x00000AAA 0x00000555	;# AFRH

	# correct FSIZE is 0x18 or 0x19, however, this causes trouble when
	# reading the last word at end of bank in memory mapped mode

	if { $flash == 1 } {
		# for flash 1 only w25q256fv
		mww 0x52005000 0x03500018			;# QUADSPI_CR: PRESCALER=3, APMS=1, FTHRES=0, FSEL=0, DFM=0, SSHIFT=1, TCEN=1
		mww 0x52005004 0x00190100			;# QUADSPI_DCR: FSIZE=0x18, CSHT=0x01, CKMODE=0
	} else {
		if { $flash == 2 } {
			# for flash 2 only w25q256fv
			mww 0x52005000 0x03500098		;# QUADSPI_CR: PRESCALER=3, APMS=1, FTHRES=0, FSEL=1, DFM=0, SSHIFT=1, TCEN=1
			mww 0x52005004 0x00190100		;# QUADSPI_DCR: FSIZE=0x18, CSHT=0x01, CKMODE=0
		} else {
			# for dual flash mode 2 * w25q256fv
			mww 0x52005000 0x03500058		;# QUADSPI_CR: PRESCALER=3, APMS=1, FTHRES=0, FSEL=0, DFM=1, SSHIFT=1, TCEN=1
			mww 0x52005004 0x001A0100		;# QUADSPI_DCR: FSIZE=0x19, CSHT=0x01, CKMODE=0
		}
	}

	mww 0x52005014 0x0D002503				;# QUADSPI_CCR: FMODE=0x3, DMODE=0x1, DCYC=0x0, ADSIZE=0x3, ADMODE=0x1, IMODE=0x1
	mmw 0x52005000 0x00000001 0				;# QUADSPI_CR: EN=1

	# Exit QPI mode
	mww 0x52005014 0x000003FF				;# QUADSPI_CCR: FMODE=0x0, DMODE=0x0, DCYC=0x0, ADSIZE=0x0, ADMODE=0x0, IMODE=0x3, INSTR=Exit QPI
	sleep 1

	# Enter 4-byte mode
	mww 0x52005014 0x000001B7				;# QUADSPI_CCR: FMODE=0x0, DMODE=0x0, DCYC=0x0, ADSIZE=0x0, ADMODE=0x0, IMODE=0x1, INSTR=Enter 4-byte
	sleep 1

	if { $qpi == 1 } {
		# Enter QPI mode
		mww 0x52005014 0x00000138			;# QUADSPI_CCR: FMODE=0x0, DMODE=0x0, DCYC=0x0, ADSIZE=0x0, ADMODE=0x0, IMODE=0x1, INSTR=Enter QPI
		sleep 1

		# memory-mapped fast read mode with 4-byte addresses and 2 dummy cycles (for read only)
		mww 0x52005014 0x0F083F0B			;# QUADSPI_CCR: FMODE=0x3, DMODE=0x3, DCYC=0x2, ADSIZE=0x3, ADMODE=0x3, IMODE=0x3, INSTR=Fast READ

		# as QSPI is set to instruction/address/data on 4 lines in memory mapped mode, driver will *always*
		# use this setting (i. e. for probe, erase, write)
		# the 'Enter QPI mode' command is chip specific, additionally both w25q256fv must be configured in advance by
		# programming the non-volatile QE bit (bit 1 in status register 2), e. g. by the following commands
		#
		# stmqspi spicmd 2 0 0x06
		# stmqspi spicmd 2 0 0x31 0x02 0x02
		# stmqspi spicmd 2 2 0x35
		#
		# the last one should return  '-> 02 02' to indicate successful setting of QE bit
		# furthemore, the flash chip changes id from 0x1940ef to 0x1960ef upon entering QPI mode
	} else {
		# memory-mapped read mode with 4-byte addresses
		mww 0x52005014 0x0D003503			;# QUADSPI_CCR: FMODE=0x3, DMODE=0x1, DCYC=0x0, ADSIZE=0x3, ADMODE=0x1, IMODE=0x1, INSTR=READ
	}
}

$_CHIPNAME.cpu0 configure -event reset-init {
	mww 0x52002000 0x00000034				;# FLASH_ACR: 4 WS for 192 MHZ HCLK

	mmw 0x58024400 0x00000001 0x00000018	;# RCC_CR: HSIDIV=1, HSI on
	mmw 0x58024410 0x10000000 0xEE000007	;# RCC_CFGR: MCO2=system, MCO2PRE=8, HSI as system clock
	mww 0x58024418 0x00000040				;# RCC_D1CFGR: D1CPRE=1, D1PPRE=2, HPRE=1
	mww 0x5802441C 0x00000440				;# RCC_D2CFGR: D2PPRE2=2, D2PPRE1=2
	mww 0x58024420 0x00000040				;# RCC_D3CFGR: D3PPRE=2
	mww 0x58024428 0x00000040				;# RCC_PPLCKSELR: DIVM3=0, DIVM2=0, DIVM1=4, PLLSRC=HSI
	mmw 0x5802442C 0x0001000C 0x00000002	;# RCC_PLLCFGR: PLL1RGE=8MHz to 16MHz, PLL1VCOSEL=wide
	mww 0x58024430 0x01070217				;# RCC_PLL1DIVR: 192 MHz: DIVR1=2, DIVQ=8, DIVP1=2, DIVN1=24
	mmw 0x58024400 0x01000000 0				;# RCC_CR: PLL1ON=1
	sleep 1
	mmw 0x58024410 0x00000003 0				;# RCC_CFGR: PLL1 as system clock
	sleep 1

	adapter speed 24000

	qspi_init 0 1
}
