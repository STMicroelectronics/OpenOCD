# script for SR6P7G7 family

#
# SR6P7G7 devices support JTAG transport.
#

set _CHIPNAME sr6x7
set _ENDIAN little

# Configure for SR6P7G7-CR52
set _TAPID 0x4BA06477

#set _ENABLE_DME   1
#set _ENABLE_DSPH  1
#set _ENABLE_HSM   1

#
# Definition of target names
#
set _TARGETNAME    armv8

set _TAPNAME $_CHIPNAME.tap
set _DAPNAME $_CHIPNAME.dap

set _APB_AP $_CHIPNAME.apb
set _AXI_AP $_CHIPNAME.axi

set _AP_SEL_APB       0x00002000
set _AP_SEL_AXI       0x00004000


# Kite0/Core0: Cortex-R52
set _AHB_AP_K0C0      $_CHIPNAME.k0c0.ahb
set _K0C0             $_CHIPNAME.k0c0.core
set _AP_SEL_AHB_K0C0  0x7E810000


#
# Configure JTAG TAP
#
jtag newtap $_CHIPNAME tap -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_TAPID

#
# Configure JTAG DAP
#
dap create $_DAPNAME -chain-position $_TAPNAME -adiv6

# Create the DAP APB-AP MEM-AP target
target create $_APB_AP mem_ap -endian $_ENDIAN \
	-dap $_DAPNAME \
	-ap-num $_AP_SEL_APB

# Create the DAP AXI-AP MEM-AP target
target create $_AXI_AP mem_ap -endian $_ENDIAN \
	-dap $_DAPNAME \
	-ap-num $_AP_SEL_AXI

##########################################################
# Cores
##########################################################

# Create and configure Cross Trigger Interface (CTI) - required for halt and resume
set _CTINAME $_CHIPNAME.k0c0.cti
cti create $_CTINAME \
	-dap $_DAPNAME \
	-ap-num $_AP_SEL_APB \
	-baseaddr 0x7E820000

# Create the target core for K0C0
target create $_K0C0 aarch64 -endian $_ENDIAN \
	-dap $_DAPNAME \
	-ap-num $_AP_SEL_APB \
	-dbgbase 0x7E810000 \
	-cti $_CTINAME \
	-coreid 1


if { [info exists _ENABLE_DME] } {

# DME: Cortex-M4
set _AHB_AP_DME       $_CHIPNAME.dme.ahb
set _DME              $_CHIPNAME.dme.core
set _AP_SEL_AHB_DME   0x01003000

#
# Create the DAP AHB-AP MEM-AP target for the Cortex-M4 DME
#
target create $_AHB_AP_DME mem_ap -endian $_ENDIAN \
	-dap $_DAPNAME \
	-ap-num $_AP_SEL_AHB_DME

# Create the target core for DME
target create $_DME cortex_m -endian $_ENDIAN \
	-dap $_DAPNAME \
	-ap-num $_AP_SEL_AHB_DME
}


if { [info exists _ENABLE_DSPH] } {

# DSPH: Cortex-M4
set _AHB_AP_DSPH      $_CHIPNAME.dsph.ahb
set _DSPH             $_CHIPNAME.dsph.core
set _AP_SEL_AHB_DSPH  0x01002000

#
# Create the DAP AHB-AP MEM-AP target for the Cortex-M4 DSPH
#
target create $_AHB_AP_DSPH mem_ap -endian $_ENDIAN \
	-dap $_DAPNAME \
	-ap-num $_AP_SEL_AHB_DSPH

# Create the target core for DSPH
target create $_DSPH cortex_m -endian $_ENDIAN \
	-dap $_DAPNAME \
	-ap-num $_AP_SEL_AHB_DSPH
}

if { [info exists _ENABLE_HSM] } {

# HSM: Cortex-M4
set _AHB_AP_HSM       $_CHIPNAME.ham.ahb
set _HSM              $_CHIPNAME.hsm.core
set _AP_SEL_AHB_HSM   0x00007000

#
# Create the DAP AHB-AP MEM-AP target for the Cortex-M4 DME
#
target create $_AHB_AP_HSM mem_ap -endian $_ENDIAN \
	-dap $_DAPNAME \
	-ap-num $_AP_SEL_AHB_HSM

# Create the target core for HSM
target create $_HSM cortex_m -endian $_ENDIAN \
	-dap $_DAPNAME \
	-ap-num $_AP_SEL_AHB_HSM

}


#
# Memory procedures
#
proc clear_memory { start_addr end_addr } {
	global _AXI_AP

	echo "Clearing memory \[$start_addr-$end_addr\]"

	set tmp [expr {$end_addr - $start_addr}]
	set count [expr {$tmp + 1}]
	$_AXI_AP mwd $start_addr 0 [expr {$count / 8}]
}


proc clear_memories { } {
	clear_memory 0x60000000 0x6007FFFF
#	clear_memory 0x24020000 0x2403FFFF
}
