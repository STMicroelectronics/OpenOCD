# script for SR5E1 family

#
# SR5E1 devices support JTAG transport.
#

#
# Topology
#
#  DAP [SWJ]
#  |
#  +-- APB-AP [MEM-AP]
#  |   |
#  |   +--AHB-AP-1 [Core 1]
#  |   +--AHB-AP-2 [Core 2]
#  |   +--AHB-AP-3 [Core H]
#  |
#  +-- AXI-AP [MEM-AP]
#  |
#  +-- JTAG-AP [Testing]
#

# SYStem.CPU SR5E1-CM7-1
# SYStem.CONFIG APBAP1.Base     DP:0x60002000
# SYStem.CONFIG.AXIAP1.Base     DP:0x60004000
# SYStem.CONFIG AHBAP1.Base    APB:0x60102000
# SYStem.CONFIG.ETF1.Base      APB:0x60109000
# SYStem.CONFIG.FUNNEL1.Base   APB:0x60108000
# SYStem.CONFIG.TPIU1.Base     APB:0x6010A000
# SYStem.Attach


# Coresight SoC ROM Table 	0x60100000
# AHB-AP Core 1				0x60102000
# AHB-AP Core 2				0x60104000
# AHB-AP Core H				0x60106000
# CS SoC Trace funnel		0x60108000
# CS SoC ETF				0x60109000
# CS SoC TPIU				0x6010A000
# CS SoC CTI 				0x6010B000
# CS Timestamp generator	0x6010C000


set _CHIPNAME sr5e1
set _ENDIAN little

# Configure for SR5E1-CM7-1E1
set _TAPID 0x4BA06477

#
# Definition of target names
#
set _TARGETNAME armv7

set _TAPNAME $_CHIPNAME.$_TARGETNAME.tap
set _DAPNAME $_CHIPNAME.$_TARGETNAME.dap

set _APB_AP $_CHIPNAME.$_TARGETNAME.apb
set _AXI_AP $_CHIPNAME.$_TARGETNAME.axi

set _AHB_AP_1 $_CHIPNAME.$_TARGETNAME.ahb.1
set _AHB_AP_2 $_CHIPNAME.$_TARGETNAME.ahb.2

set _AP_SEL_APB 0x60002000
set _AP_SEL_AXI 0x60004000

set _AP_SEL_AHB 0x60102000

set _AP_AHB_CORE1 0x60102000
set _AP_AHB_CORE2 0x60104000
set _AP_AHB_COREH 0x60106000

set _CPU_1 $_CHIPNAME.$_TARGETNAME.cpu1
set _CPU_2 $_CHIPNAME.$_TARGETNAME.cpu2
set _CPU_H $_CHIPNAME.$_TARGETNAME.cpuh

#
# Configure JTAG TAP
#
jtag newtap $_CHIPNAME.$_TARGETNAME tap \
	-irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_TAPID


#
# Configure JTAG DAP
#
dap create $_DAPNAME -chain-position $_TAPNAME -adiv6

# Create the DAP APB-AP MEM-AP target
target create $_APB_AP mem_ap -endian $_ENDIAN \
	-dap $_DAPNAME \
	-ap-num $_AP_SEL_APB


# Create the DAP AXI-AP MEM-AP target
target create $_AXI_AP mem_ap -endian $_ENDIAN \
	-dap $_DAPNAME \
	-ap-num $_AP_SEL_AXI

#
# Create the DAP AHB-AP MEM-AP target for the ARMV7 cores
# This Mem AP is accessible through the parent DAP APB-AP MEM-AP
# New option: -parent-ap
#
target create $_AHB_AP_1 mem_ap -endian $_ENDIAN \
	-dap $_DAPNAME \
	-parent-ap $_AP_SEL_APB \
	-ap-num $_AP_SEL_AHB


#target create $_AHB_AP_2 mem_ap -endian $_ENDIAN \
	-dap $_DAPNAME \
	-parent-ap $_AP_SEL_APB \
	-ap-num $_AP_SEL_AHB


# Create the target core 1
target create $_CPU_1 cortex_m -endian $_ENDIAN \
	-dap $_DAPNAME \
	-ap-num $_AP_AHB_CORE1


#target create $_CPU_2 cortex_m -endian $_ENDIAN \
	-dap $_DAPNAME \
	-ap-num $_AP_AHB_CORE2

#target create $_CPU_H cortex_m -endian $_ENDIAN \
	-dap $_DAPNAME \
	-ap-num $_AP_AHB_COREH

targets $_CPU_1

#
# Events configuration
#

$_CPU_1 configure -event reset-init   { 
	disable_reset_escalation
	clear_memories 
}

$_CPU_1 configure -event gdb-attach { 	
	reset init	
	disable_reset_escalation
	clear_memories
}

#
# Memory procedures
#

proc disable_reset_escalation { } {
	global _AXI_AP
	$_AXI_AP mwd 0x44000104 0
}

proc clear_memory { start_addr end_addr } {
	global _AXI_AP

	echo "Clearing memory \[$start_addr-$end_addr\]"

	set tmp [expr {$end_addr - $start_addr}]
	set count [expr {$tmp + 1}]
	$_AXI_AP mwd $start_addr 0 [expr {$count / 8}]
}


proc clear_memories { } {
	#Clear Memory for WORKAREA 4K
	clear_memory 0x24000000 0x24000FFF

#	clear_memory 0x24000000 0x2401FFFF
#	clear_memory 0x24020000 0x2403FFFF
	#Fill RAM with 0x0 with 64 bit accesses skipping working area
	echo "Clearing memory SRAM1 \[0x24001000+124K\]"
	ram_fill 0x24001000 0x1F000	
	echo "Clearing memory SRAM2 \[0x24020000+128K\]"
	ram_fill 0x24020000 0x20000
	halt
}

# Work-area is a space in RAM used for flash programming
# By default use 4kB
if { [info exists WORKAREASIZE] } {
   set _WORKAREASIZE $WORKAREASIZE
} else {
   set _WORKAREASIZE 0x1000
}

# Allow overriding the Flash bank size
if { [info exists FLASH_SIZE] } {
    set _FLASH_SIZE $FLASH_SIZE
} else {
    # autodetect size
    set _FLASH_SIZE 0xF0000
}

$_CPU_1 configure -work-area-phys 0x24000000 -work-area-size $_WORKAREASIZE


# flash size will be probed

# Partition 1 - 960K code flash
set _FLASHNAME_0 $_CHIPNAME.0.flash
flash bank $_FLASHNAME_0 sr5 0x08000000 $_FLASH_SIZE 0 0 $_CPU_1

# Partition 2 - 960K
set _FLASHNAME_1 $_CHIPNAME.1.flash
flash bank $_FLASHNAME_1 sr5 0x080F0000 $_FLASH_SIZE 0 0 $_CPU_1

# Partition 3 - Data Flash - 64K
set _FLASHNAME_2 $_CHIPNAME.2.flash
flash bank $_FLASHNAME_2 sr5 0x08F00000 0x10000 0 0 $_CPU_1

# Partition 3 - HSM EEPROM Data - 32K
set _FLASHNAME_3 $_CHIPNAME.3.flash
flash bank $_FLASHNAME_3 sr5 0x018F00000 0x8000 0 0 $_CPU_1

# Partition 0 - 960K code flash
set _FLASHNAME_4 $_CHIPNAME.4.flash
flash bank $_FLASHNAME_4 sr5 0x18000000 0x28000 0 0 $_CPU_1