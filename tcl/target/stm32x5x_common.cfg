# SPDX-License-Identifier: GPL-2.0-or-later

# common script for stm32l5x and stm32u5x families
set _TARGETNAME $_CHIPNAME.cpu

# Work-area is a space in RAM used for flash programming
# By default use 64kB at address 0x20000000
if { [info exists WORKAREASIZE] } {
	set $_TARGETNAME.workarea_size $WORKAREASIZE
} else {
	set $_TARGETNAME.workarea_size 0x10000
}

if { [info exists WORKAREAADDR] } {
	set _WORKAREAADDR $WORKAREAADDR
} else {
	set _WORKAREAADDR 0x20000000
}

# When RDP = 0x55, only a part of the RAM is set as non-secure by the secure
# application using the Secure Attribution Unit (SAU).

# This non-secure RAM cannot be auto-detected by the debugger, so to avoid
# programming issues, by default do not use the work-area and fall back to flash
# programming without flash loader (slower).
# If the user knows about the current SAU partitioning, he can provide
# the work-area address and size then force the usage of the loader by setting
# USE_LOADER_IN_RDP_05 to 1

# By default do not use the flash loader in RDP 0.5
if { [info exists USE_LOADER_IN_RDP_05] } {
	set $_TARGETNAME.use_loader_in_rdp_05 $USE_LOADER_IN_RDP_05
} else {
	set $_TARGETNAME.use_loader_in_rdp_05 0
}

#jtag scan chain
if { [info exists CPUTAPID] } {
	set _CPUTAPID $CPUTAPID
} else {
	if { [using_jtag] } {
		# STM32L5x: RM0438 Rev5, Section 52.2.8 JTAG debug port - Table 425. JTAG-DP data registers
		# STM32U5x: RM0456 Rev1, Section 65.2.8 JTAG debug port - Table 661. JTAG-DP data registers
		# Corresponds to CortexÂ®-M33 JTAG debug port ID code
		set _CPUTAPID 0x0ba04477
	} {
		# SWD IDCODE (single drop, arm)
		set _CPUTAPID 0x0be12477
	}
}

swj_newdap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID
dap create $_CHIPNAME.dap -chain-position $_CHIPNAME.cpu

if {[using_jtag]} {
	jtag newtap $_CHIPNAME bs -irlen 5
}

target create $_TARGETNAME cortex_m -endian little -dap $_CHIPNAME.dap

# use non-secure RAM by default
$_TARGETNAME configure -work-area-phys $_WORKAREAADDR -work-area-size [set $_TARGETNAME.workarea_size] -work-area-backup 0

# create sec/ns flash and otp memories (sizes will be probed)
flash bank $_CHIPNAME.flash_ns      stm32l4x 0x08000000 0 0 0 $_TARGETNAME
flash bank $_CHIPNAME.flash_alias_s stm32l4x 0x0C000000 0 0 0 $_TARGETNAME
flash bank $_CHIPNAME.otp           stm32l4x 0x0BFA0000 0 0 0 $_TARGETNAME

# Common knowledge tells JTAG speed should be <= F_CPU/6.
# F_CPU after reset is MSI 4MHz, so use F_JTAG = 500 kHz to stay on
# the safe side.
#
# Note that there is a pretty wide band where things are
# more or less stable, see http://review.openocd.org/3366
adapter speed 500

adapter srst delay 100
if {[using_jtag]} {
	jtag_ntrst_delay 100
}

reset_config srst_nogate

if {[using_hla]} {
	echo "Warn : The selected adapter does not support debugging this device in secure mode"
} else {
	# if srst is not fitted use SYSRESETREQ to
	# perform a soft reset
	cortex_m reset_config sysresetreq
}

proc stm32x5x_is_secure {} {
	# read Debug Security Control and Status Register (DSCSR) and check CDS (bit 16)
	set DSCSR [mrw 0xE000EE08]
	return [expr {($DSCSR & (1 << 16)) != 0}]
}

proc stm32x5x_ahb_ap_non_secure_access {} {
	# in HLA mode, non-secure debugging is possible without changing the AP CSW
	if {![using_hla]} {
		# SPROT=1=Non Secure access, Priv=1
		[[target current] cget -dap] apcsw 0x4B000000 0x4F000000
	}
}

proc stm32x5x_ahb_ap_secure_access {} {
	if {![using_hla]} {
		# SPROT=0=Secure access, Priv=1
		[[target current] cget -dap] apcsw 0x0B000000 0x4F000000
	}
}

proc stm32x5x_enter_debug {} {
	set _TARGETNAME [target current]
	# check security status
	set secure [stm32x5x_is_secure]

	# check flash options, from FLASH_OPTR register
	set optr [mrw 0x40022040]
	set tzen [expr {$optr & 0x80000000}]
	set rdp [expr {$optr & 0xFF}]

	if {$secure || $tzen} {
		stm32x5x_ahb_ap_secure_access
	} else {
		stm32x5x_ahb_ap_non_secure_access
	}

	# print the secure state only when it changes
	global $_TARGETNAME.secure
	set initialized [info exists $_TARGETNAME.secure]

	if {!$initialized || $secure != [set $_TARGETNAME.secure]} {
		# update saved security state
		set $_TARGETNAME.secure $secure

		echo [format "$_TARGETNAME in %s state" [expr {$secure ? "Secure" : "Non-Secure"}]]
	}

	# avoid some noise, when reset is asserted OPTR is read as zero
	if {$optr == 0} { return }

	# ensure that workarea is correctly configured if there is a change in tzen or rdp
	global $_TARGETNAME.tzen $_TARGETNAME.rdp
	set initialized [expr {[info exists $_TARGETNAME.tzen] && [info exists $_TARGETNAME.rdp]}]

	if {!$initialized || $tzen != [set $_TARGETNAME.tzen] || $rdp != [set $_TARGETNAME.rdp]} {
		# update saved tzen and rdp state
		set $_TARGETNAME.tzen $tzen
		set $_TARGETNAME.rdp $rdp

		echo [format "$_TARGETNAME TrustZone %s" [expr {$tzen ? "enabled" : "disabled"}]]

		# use secure workarea only when TZEN=1 and RDP!=0x55
		set workarea_addr [$_TARGETNAME cget -work-area-phys]
		if {$tzen && ($rdp != 0x55)} {
			set workarea_addr [expr {$workarea_addr | 0x10000000}]
		} else {
			set workarea_addr [expr {$workarea_addr & ~0x10000000}]
		}

		echo [format "$_TARGETNAME work-area address is set to 0x%08X" $workarea_addr]
		$_TARGETNAME configure -work-area-phys $workarea_addr

		# when RDP=0x55 (TZEN=1), only non-secure flash could be programmed
		# but workarea is not accessible since the RAM is secure.
		# to fall back to programming without loader set the workarea size to zero
		global $_TARGETNAME.use_loader_in_rdp_05
		if {$rdp == 0x55 && ![set $_TARGETNAME.use_loader_in_rdp_05]} {
			$_TARGETNAME configure -work-area-size 0
			echo "$_TARGETNAME work-area is disabled"
		} elseif {[$_TARGETNAME cget -work-area-size] == 0} {
			# restore the work-area size only if it was set previously to zero
			global $_TARGETNAME.workarea_size

			if {[set $_TARGETNAME.workarea_size] != 0} {
    			$_TARGETNAME configure -work-area-size [set $_TARGETNAME.workarea_size]
    			echo "$_TARGETNAME work-area is enabled"
			}
		}
	}
}

$_TARGETNAME configure -event reset-start {
	# Reset clock is MSI (4 MHz)
	adapter speed 480
}

$_TARGETNAME configure -event examine-end {
	stm32x5x_enter_debug

	# DBGMCU_CR |= DBG_STANDBY | DBG_STOP
	mmw 0xE0044004 0x00000006 0

	# Stop watchdog counters during halt
	# DBGMCU_APB1_FZ |= DBG_IWDG_STOP | DBG_WWDG_STOP
	mmw 0xE0044008 0x00001800 0
}

$_TARGETNAME configure -event halted {
	stm32x5x_enter_debug
}

tpiu create $_CHIPNAME.tpiu -dap $_CHIPNAME.dap -ap-num 0 -baseaddr 0xE0040000

lappend _telnet_autocomplete_skip _proc_pre_enable_$_CHIPNAME.tpiu
proc _proc_pre_enable_$_CHIPNAME.tpiu {_targetname} {
	targets $_targetname

	# Set TRACE_EN and TRACE_IOEN in DBGMCU_CR
	# Leave TRACE_MODE untouched (defaults to async).
	# When using sync change this value accordingly to configure trace pins
	# assignment
	mmw 0xE0044004 0x00000030 0
}

$_CHIPNAME.tpiu configure -event pre-enable "_proc_pre_enable_$_CHIPNAME.tpiu $_TARGETNAME"
