# script for SPC58xN family

# Core family configuration
source [find target/spc58.cfg]

set _CHIPNAME   spc58nn
set _ENDIAN     big

if { [info exists TAPID] } {
   set _TAPID  $TAPID
} else {
    set _TAPID  0x20112041
}

set _TARGETNAME $_CHIPNAME.tap

#
# Configure JTAG TAP
#
jtag newtap $_CHIPNAME tap \
	-irlen 6 \
	-ircapture 0x1 \
	-irmask 0x3f \
	-expected-id $_TAPID


# Create the target core 
target create $_CHIPNAME.cpu powerpc \
	-endian $_ENDIAN \
	-chain-position $_TARGETNAME


#$_CHIPNAME.cpu configure \
#	-event reset-init   { force_reset; disable_watchdog; invalidate_cache }

$_CHIPNAME.cpu configure -event gdb-attach {
#    echo "LOG: gdb-attach event"
    reset init
    init_target
}

$_CHIPNAME.cpu configure -event reset-init {
    init_target
}

# Work-area is a space in RAM used for flash programming
# By default use 4kB
if { [info exists WORKAREASIZE] } {
   set _WORKAREASIZE $WORKAREASIZE
} else {
   set _WORKAREASIZE 0x1000
}

# Allow overriding the Flash bank size
if { [info exists FLASH_SIZE] } {
    set _FLASH_SIZE $FLASH_SIZE
} else {
    # autodetect size
    set _FLASH_SIZE 0x600000
}


$_CHIPNAME.cpu configure -work-area-phys 0x4008C000 -work-area-size $_WORKAREASIZE


# flash size will be probed
set _FLASHNAME_0 $_CHIPNAME.0.flash
flash bank $_FLASHNAME_0 spc58xn 0x00FC0000 $_FLASH_SIZE 0 0 $_CHIPNAME.cpu

set _FLASHNAME_1 $_CHIPNAME.1.flash
flash bank $_FLASHNAME_1 spc58xn 0x00800000 0x40000 0 0 $_CHIPNAME.cpu

set _FLASHNAME_2 $_CHIPNAME.2.flash
flash bank $_FLASHNAME_2 spc58xn 0x00404000 0x4000 0 0 $_CHIPNAME.cpu

set _FLASHNAME_3 $_CHIPNAME.3.flash
flash bank $_FLASHNAME_3 spc58xn 0x0060C000 0x24000 0 0 $_CHIPNAME.cpu

set _FLASHNAME_4 $_CHIPNAME.4.flash
flash bank $_FLASHNAME_4 spc58xn 0x00680000 0x8000 0 0 $_CHIPNAME.cpu

proc init_target { } {
	disable_all_watchdog
	invalidate_cache
	init_regs
	# work area must be initialized by clear_memory
	echo "initialize work area from 0x4008C000 to 0x4008CFFF"
	clear_memory 0x4008C000 0x4008CFFF
	echo "initialize RAM from 0x4008D000 to 0x4008FFFF"
	ram_fill 0x4008D000 0x3000
	# non working area can be initilized by fast ram_fill command
	# usage: ram_fill start_addr size_kb [value_32bit]
	echo "initialize RAM from 0x40070000 to 0x4007DFFF"
	ram_fill 0x40070000 0xE000
	echo "initialize RAM from 0x4007E000 to 0x4008BFFF"
	ram_fill 0x4007E000 0xE000
	#setup IVOPR points to 0x4008D000
	echo "setup IVOPR points"
	setspr 0x3F 0x4008D000
}

proc disable_all_watchdog { } {
	echo "Disable Software Watchdog Timer"
	# 0xF4058010 swt_2 swt_sr
	# 0xF4058000 swt_2 swt_cr
	mww 0xF4058010 0x0000C520
	mww 0xF4058010 0x0000D928
	mww 0xF4058000 0xFF000002
	
	#swt_3
	mww 0xF405C010 0x0000C520
	mww 0xF405C010 0x0000D928
	mww 0xF405C000 0xFF000002
	
	#swt_0
	mww 0xFC050010 0x0000C520
	mww 0xFC050010 0x0000D928
	mww 0xFC050000 0xFF000002
	
	#swt_1
	mww 0xFC054010 0x0000C520
	mww 0xFC054010 0x0000D928
	mww 0xFC054000 0xFF000002
}

