# script for SPC58NG family

# Core family configuration
source [find target/spc58.cfg]

set _CHIPNAME   spc58ng
set _ENDIAN     big

if { [info exists TAPID] } {
   set _TAPID  $TAPID
} else {
    set _TAPID  0x11110041
}

set _TARGETNAME $_CHIPNAME.tap

#
# Configure JTAG TAP
#
jtag newtap $_CHIPNAME tap \
	-irlen 6 \
	-ircapture 0x1 \
	-irmask 0x3f \
	-expected-id $_TAPID


# Create the target core 
target create $_CHIPNAME.cpu powerpc \
	-endian $_ENDIAN \
	-chain-position $_TARGETNAME

$_CHIPNAME.cpu configure -event reset-init {
#    echo "LOG: reset-init event"
    init_target
}

$_CHIPNAME.cpu configure -event gdb-attach {
#    echo "LOG: gdb-attach event"
    reset init
    init_target
}

# Work-area is a space in RAM used for flash programming
# By default use 4kB
if { [info exists WORKAREASIZE] } {
   set _WORKAREASIZE $WORKAREASIZE
} else {
   set _WORKAREASIZE 0x1000
}

# Allow overriding the Flash bank size
if { [info exists FLASH_SIZE] } {
    set _FLASH_SIZE $FLASH_SIZE
} else {
    # autodetect size
    set _FLASH_SIZE 0x600000
}


$_CHIPNAME.cpu configure -work-area-phys 0x400A8000 -work-area-size $_WORKAREASIZE


# flash size will be probed
set _FLASHNAME_0 $_CHIPNAME.0.flash
flash bank $_FLASHNAME_0 spc58ng 0x00FC0000 $_FLASH_SIZE 0 0 $_CHIPNAME.cpu

set _FLASHNAME_1 $_CHIPNAME.1.flash
flash bank $_FLASHNAME_1 spc58ng 0x00404000 0x24000 0 0 $_CHIPNAME.cpu

set _FLASHNAME_2 $_CHIPNAME.2.flash
flash bank $_FLASHNAME_2 spc58ng 0x0060C000 0x24000 0 0 $_CHIPNAME.cpu

set _FLASHNAME_3 $_CHIPNAME.3.flash
flash bank $_FLASHNAME_3 spc58ng 0x00680000 0x8000 0 0 $_CHIPNAME.cpu

set _FLASHNAME_4 $_CHIPNAME.4.flash
flash bank $_FLASHNAME_4 spc58ng 0x00800000 0x40000 0 0 $_CHIPNAME.cpu

proc init_target { } {
	disable_watchdog
	invalidate_cache
	init_regs
	#Clear Memory for Ram Fill function
	clear_memory 0x400A8000 0x400A8FFF
	#Fill RAM with 0x0 with 64 bit accesses skipping working area
	#echo "Clearing memory \[0x400A8400+4K\]"
	#ram_fill 0x400A9000 0x1000
	echo "Clearing memory \[0x40060000+128K+160K\]"
	ram_fill 0x40060000 0x48000	
	echo "Clearing memory \[0x40060000+120K+128K+64K\]"
	ram_fill 0x400AA000 0x4E000	
	#setup IVOPR points to 0x01000000
	echo "setup IVOPR points"
	setspr 0x3F 0x01000000
}
